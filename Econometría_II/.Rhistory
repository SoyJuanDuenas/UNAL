##____________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                         ECONOMETRÍA II - 2023-I
#                             Trabajo 1, Marzo
##____________________________
##____________________________
remove(list = ls())
#Iniciamos importando librerias
library(forecast)    # Para hacer pronósticos con modelos arima
library(lmtest)      # Significancia individual de los coeficientes ARIMA
library(urca)        # Prueba de raíz unitaria
library(tseries)     # Para estimar modelos de series de tiempo y hacer pruebas de supuestos.
library(readxl)      # Para leer archivos de excel
library(stargazer)   # Para presentar resultados más estéticos.
library(psych)       # Para hacer estadísticas descriptivas
library(seasonal)    # Para desestacionalizar series
library(aTSA)        # Para hacer la prueba de efectos ARCH
library(astsa)       # Para estimar, validar y hacer pronósticos para modelos ARIMA/SARIMA
library(xts)         # Para utilizar objetos xts
library(tidyverse)   # Conjunto de paquetes (incluye dplyr y ggplot2)
library(readxl)      # Para leer archivos excel
library(car)         # Para usar la función qqPlot
# Para la realización del trabajo se uilizará el Índice de producción real de la
# industria manufacturera colombiana
setwd("C:/Users/PC/Documents/Repos/UNAL/Econometría_II")
ipr =  as.data.frame(read_excel("srea_027.xls", range= cell_rows(9:567)))
colnames(ipr) <- c("Año", "Mes", "Total_industria", "Total_sin_trilla")
#Iniciamos el Data-cleaning
ipr = select(ipr, -"Total_sin_trilla")
for (i in 1:length(ipr)){
if (is.na((ipr[i,"Año"])) == FALSE){
valor = ipr[i,"Año"]
}else{
ipr[i,"Año"] = valor
}
}
for (i in 1:558){
if (is.na((ipr[i,"Año"])) == FALSE){
valor = ipr[i,"Año"]
}else{
ipr[i,"Año"] = valor
}
}
ipr = na.omit(ipr)
plot(ipr$Total_industria)
ipr_fac = acf(ipr$Total_industria, plot = F)
ipr_facp = pacf(ipr$Total_industria, plot = F)
plot(ipr_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff = diff(log(ipr$Total_industria))
ipr_fac_diff = acf(ipr_diff, plot = F)
ipr_facp_diff = pacf(ipr_diff, plot = F)
plot(ipr_fac_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_ts = ts(ipr$Total_industria, start = 1980, frequency = 12)
##____________________________
##____________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                         ECONOMETRÍA II - 2023-I
#                             Trabajo 1, Marzo
##____________________________
##____________________________
remove(list = ls())
#Iniciamos importando librerias
library(forecast)    # Para hacer pronósticos con modelos arima
library(lmtest)      # Significancia individual de los coeficientes ARIMA
library(urca)        # Prueba de raíz unitaria
library(tseries)     # Para estimar modelos de series de tiempo y hacer pruebas de supuestos.
library(readxl)      # Para leer archivos de excel
library(stargazer)   # Para presentar resultados más estéticos.
library(psych)       # Para hacer estadísticas descriptivas
library(seasonal)    # Para desestacionalizar series
library(aTSA)        # Para hacer la prueba de efectos ARCH
library(astsa)       # Para estimar, validar y hacer pronósticos para modelos ARIMA/SARIMA
library(xts)         # Para utilizar objetos xts
library(tidyverse)   # Conjunto de paquetes (incluye dplyr y ggplot2)
library(readxl)      # Para leer archivos excel
library(car)         # Para usar la función qqPlot
# Para la realización del trabajo se uilizará el Índice de producción real de la
# industria manufacturera colombiana
setwd("C:/Users/PC/Documents/Repos/UNAL/Econometría_II")
ipr =  read_excel("srea_027.xls", range= cell_rows(9:567))
colnames(ipr) <- c("Año", "Mes", "Total_industria", "Total_sin_trilla")
ipr_ts = ts(ipr$Total_industria, start = 1980, frequency = 12)
##____________________________
##____________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                         ECONOMETRÍA II - 2023-I
#                             Trabajo 1, Marzo
##____________________________
##____________________________
remove(list = ls())
#Iniciamos importando librerias
library(forecast)    # Para hacer pronósticos con modelos arima
library(lmtest)      # Significancia individual de los coeficientes ARIMA
library(urca)        # Prueba de raíz unitaria
library(tseries)     # Para estimar modelos de series de tiempo y hacer pruebas de supuestos.
library(readxl)      # Para leer archivos de excel
library(stargazer)   # Para presentar resultados más estéticos.
library(psych)       # Para hacer estadísticas descriptivas
library(seasonal)    # Para desestacionalizar series
library(aTSA)        # Para hacer la prueba de efectos ARCH
library(astsa)       # Para estimar, validar y hacer pronósticos para modelos ARIMA/SARIMA
library(xts)         # Para utilizar objetos xts
library(tidyverse)   # Conjunto de paquetes (incluye dplyr y ggplot2)
library(readxl)      # Para leer archivos excel
library(car)         # Para usar la función qqPlot
# Para la realización del trabajo se uilizará el Índice de producción real de la
# industria manufacturera colombiana
setwd("C:/Users/PC/Documents/Repos/UNAL/Econometría_II")
ipr =  read_excel("srea_027.xls", range= cell_rows(9:567))
colnames(ipr) <- c("Año", "Mes", "Total_industria", "Total_sin_trilla")
#Iniciamos el Data-cleaning
ipr = select(ipr, -"Total_sin_trilla")
for (i in 1:558){
if (is.na((ipr[i,"Año"])) == FALSE){
valor = ipr[i,"Año"]
}else{
ipr[i,"Año"] = valor
}
}
ipr = na.omit(ipr)
ipr_ts = ts(ipr$Total_industria, start = 1980, frequency = 12)
plot(ipr_ts)
ipr_fac = acf(ipr_ts, plot = F)
ipr_facp = pacf(ipr_ts, plot = F)
plot(ipr_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff = diff(log(ipr$Total_industria))
ipr_fac_diff = acf(ipr_diff, plot = F)
ipr_facp_diff = pacf(ipr_diff, plot = F)
plot(ipr_fac_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff = diff(log(ipr_ts))
ipr_fac_diff = acf(ipr_diff, plot = F)
ipr_facp_diff = pacf(ipr_diff, plot = F)
plot(ipr_fac_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
#Al no funcionar estas transformaciones realizaremos un promedio trimestral
ipr_trimestral = aggregate(ipr_ts, nfrequency = 4, FUN = mean)
ipr_fac_tri = acf(ipr_trimestral, plot = F)
ipr_facp_tri = pacf(ipr_trimestral, plot = F)
plot(ipr_fac_tri, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_tri, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff_tri = diff(log(ipr_trimestral))
ipr_fac_diff_tri = acf(ipr_diff_tri, plot = F)
ipr_facp_diff_tri = pacf(ipr_diff_tri, plot = F)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff_tri = diff(ipr_trimestral)
ipr_fac_diff_tri = acf(ipr_diff_tri, plot = F)
ipr_facp_diff_tri = pacf(ipr_diff_tri, plot = F)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff_tri = log(ipr_trimestral)
ipr_fac_diff_tri = acf(ipr_diff_tri, plot = F)
ipr_facp_diff_tri = pacf(ipr_diff_tri, plot = F)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
plot(ipr_ts)
ipr_diff_diff = diff(ipr_diff)
ipr_diff_diff
plot(ipr_diff_diff)
ipr_fac_diff_diff = acf(ipr_diff_diff, plot = F)
ipr_facp_diff_diff = pacf(ipr_diff_diff, plot = F)
plot(ipr_diff_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_diff_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff_diff = diff(ipr_diff)
plot(ipr_diff_diff)
ipr_fac_diff_diff = acf(ipr_diff_diff, plot = F)
ipr_facp_diff_diff = pacf(ipr_diff_diff, plot = F)
plot(ipr_fac_diff_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
auto_arima = auto.arima(ipr_ts)
summary(auto_arima)
ipr_arima = arima(ipr_ts, order = c(1,0,1))
View(auto_arima)
plot(ipr_arima)
summary(ipr_arima)
summary(auto.arima)
summary(auto_arima)
plot(ipr_arima$residuals)
arima_101 = acf(ipr_arima, plot = F)
arima_101_fac = acf(ipr_arima, plot = F)
arima_101_fac = acf(ipr_arima$residuals, plot = F)
arima_101_facp = pacf(ipr_arima$residuals, plot = F)
plot(arima_101_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_101_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_arima = arima(ipr_ts, order = c(1,1,2))
plot(ipr_arima$residuals)
arima_101_fac = acf(ipr_arima$residuals, plot = F)
arima_101_facp = pacf(ipr_arima$residuals, plot = F)
plot(arima_101_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_101_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
setwd("C:/Users/PC/Documents/Repos/UNAL/Econometría_II")
ipr =  read_excel("srea_027.xls", range= cell_rows(9:550))
colnames(ipr) <- c("Año", "Mes", "Total_industria", "Total_sin_trilla")
#Iniciamos el Data-cleaning
ipr = select(ipr, -"Total_sin_trilla")
for (i in 1:558){
if (is.na((ipr[i,"Año"])) == FALSE){
valor = ipr[i,"Año"]
}else{
ipr[i,"Año"] = valor
}
}
ipr = na.omit(ipr)
ipr_ts = ts(ipr$Total_industria, start = 1980, frequency = 12)
plot(ipr_ts)
##____________________________
##____________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                         ECONOMETRÍA II - 2023-I
#                             Trabajo 1, Marzo
##____________________________
##____________________________
remove(list = ls())
#Iniciamos importando librerias
library(forecast)    # Para hacer pronósticos con modelos arima
library(lmtest)      # Significancia individual de los coeficientes ARIMA
library(urca)        # Prueba de raíz unitaria
library(tseries)     # Para estimar modelos de series de tiempo y hacer pruebas de supuestos.
library(readxl)      # Para leer archivos de excel
library(stargazer)   # Para presentar resultados más estéticos.
library(psych)       # Para hacer estadísticas descriptivas
library(seasonal)    # Para desestacionalizar series
library(aTSA)        # Para hacer la prueba de efectos ARCH
library(astsa)       # Para estimar, validar y hacer pronósticos para modelos ARIMA/SARIMA
library(xts)         # Para utilizar objetos xts
library(tidyverse)   # Conjunto de paquetes (incluye dplyr y ggplot2)
library(readxl)      # Para leer archivos excel
library(car)         # Para usar la función qqPlot
# Para la realización del trabajo se uilizará el Índice de producción real de la
# industria manufacturera colombiana
setwd("C:/Users/PC/Documents/Repos/UNAL/Econometría_II")
ipr =  read_excel("srea_027.xls", range= cell_rows(9:480))
colnames(ipr) <- c("Año", "Mes", "Total_industria", "Total_sin_trilla")
#Iniciamos el Data-cleaning
ipr = select(ipr, -"Total_sin_trilla")
for (i in 1:558){
if (is.na((ipr[i,"Año"])) == FALSE){
valor = ipr[i,"Año"]
}else{
ipr[i,"Año"] = valor
}
}
ipr = na.omit(ipr)
ipr_ts = ts(ipr$Total_industria, start = 1980, frequency = 12)
plot(ipr_ts)
ipr_fac = acf(ipr_ts, plot = F)
ipr_facp = pacf(ipr_ts, plot = F)
plot(ipr_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff = diff(log(ipr_ts))
ipr_fac_diff = acf(ipr_diff, plot = F)
ipr_facp_diff = pacf(ipr_diff, plot = F)
plot(ipr_fac_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff_diff = diff(ipr_diff)
plot(ipr_diff_diff)
ipr_fac_diff_diff = acf(ipr_diff_diff, plot = F)
ipr_facp_diff_diff = pacf(ipr_diff_diff, plot = F)
plot(ipr_fac_diff_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_trimestral = aggregate(ipr_ts, nfrequency = 4, FUN = mean)
#verificamos via grafica
ipr_fac_tri = acf(ipr_trimestral, plot = F)
ipr_facp_tri = pacf(ipr_trimestral, plot = F)
plot(ipr_fac_tri, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_tri, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_diff_tri = log(ipr_trimestral)
ipr_fac_diff_tri = acf(ipr_diff_tri, plot = F)
ipr_facp_diff_tri = pacf(ipr_diff_tri, plot = F)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
plot(ipr_trimestral)
auto_arima = auto.arima(ipr_ts)
summary(auto_arima)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
plot(ipr_arima$residuals)
arima_101_fac = acf(ipr_arima$residuals, plot = F)
arima_101_facp = pacf(ipr_arima$residuals, plot = F)
plot(arima_101_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_101_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
auto_arima = auto.arima(ipr_trimestral)
summary(auto_arima)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
plot(ipr_arima$residuals)
arima_101_fac = acf(ipr_arima$residuals, plot = F)
arima_101_facp = pacf(ipr_arima$residuals, plot = F)
plot(arima_101_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_101_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
plot(auto_arima$residuals)
adf.test(auto_arima$residuals)
kpss.test(auto_arima$residuals)
ipr_diff = diff(log(ipr_ts))
ipr_fac_diff = acf(ipr_diff, plot = F)
ipr_facp_diff = pacf(ipr_diff, plot = F)
plot(ipr_fac_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_fac_diff$residuals)
adf.test(ipr_diff$residuals)
adf.test(ipr_diff)
kpss.test(ipr_diff)
ipr_trimestral = aggregate(ipr_ts, nfrequency = 4, FUN = mean)
plot(ipr_trimestral)
ipr_fac_tri = acf(ipr_trimestral, plot = F)
ipr_facp_tri = pacf(ipr_trimestral, plot = F)
plot(ipr_fac_tri, main="Función de Autocorrelación (FAC) IPR_trimestral", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_tri, main="Función de Autocorrelación Parcial (FACP)_trimestral", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_trimestral)
kpss.test(ipr_trimestral)
ipr_log_tri = log(ipr_trimestral)
ipr_fac_log_tri = acf(ipr_log_tri, plot = F)
ipr_facp_log_tri = pacf(ipr_log_tri, plot = F)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_log_tri = log(ipr_trimestral)
ipr_fac_log_tri = acf(ipr_log_tri, plot = F, lag.max = 10)
ipr_facp_log_tri = pacf(ipr_log_tri, plot = F, lag.max = 10)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_log_tri = log(ipr_trimestral)
ipr_fac_log_tri = acf(ipr_log_tri, plot = F, lag.max = 20)
ipr_facp_log_tri = pacf(ipr_log_tri, plot = F, lag.max = 20)
plot(ipr_fac_diff_tri, main="Función de Autocorrelación (FAC) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff_tri, main="Función de Autocorrelación Parcial (FACP)IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación Parcial")
J
ipr_log_tri = log(ipr_trimestral)
ipr_fac_log_tri = acf(ipr_log_tri, plot = T)
ipr_facp_log_tri = pacf(ipr_log_tri, plot = T)
ipr_log_tri = log(ipr_trimestral)
ipr_fac_log_tri = acf(ipr_log_tri, plot = F)
ipr_facp_log_tri = pacf(ipr_log_tri, plot = F)
plot(ipr_fac_log_tri, main="Función de Autocorrelación (FAC) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_log_tri, main="Función de Autocorrelación Parcial (FACP) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación Parcial")
ipr_log_tri_diff = diff(log(ipr_trimestral))
ipr_fac_log_tri_diff = acf(ipr_log_tri_diff, plot = F)
ipr_facp_log_tri_diff = pacf(ipr_log_tri_diff, plot = F)
plot(ipr_fac_log_tri_diff, main="Función de Autocorrelación (FAC) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_log_tri_diff, main="Función de Autocorrelación Parcial (FACP) IPR (Trimestral) Log", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_log_tri_diff)
kpss.test(ipr_log_tri_diff)
ipr_tri_diff = diff(ipr_trimestral)
ipr_fac_tri_diff = acf(ipr_tri_diff, plot = F)
ipr_facp_tri_diff = pacf(ipr_tri_diff, plot = F)
plot(ipr_fac_tri_diff, main="Función de Autocorrelación (FAC) IPR (Trimestral)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_tri_diff, main="Función de Autocorrelación Parcial (FACP) IPR (Trimestral)", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_tri_diff)
kpss.test(ip_tri_diff)
adf.test(ipr_tri_diff)
kpss.test(ip_tri_diff)
adf.test(ipr_tri_diff)
kpss.test(ipr_tri_diff)
auto_arima = auto.arima(ipr_trimestral)
summary(auto_arima)
plot(auto_arima$residuals)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
plot(ipr_arima$residuals)
arima_101_fac = acf(ipr_arima$residuals, plot = F)
arima_101_facp = pacf(ipr_arima$residuals, plot = F)
plot(arima_101_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_101_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(auto_arima$residuals)
kpss.test(auto_arima$residuals)
serie_ajustada = seas(ipr_arima)
auto_arima = auto.arima(ipr_trimestral)
summary(auto_arima)
plot(auto_arima$residuals)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
serie_ajustada = seas(ipr_arima)
auto_arima = auto.arima(ipr_trimestral)
summary(auto_arima)
plot(auto_arima$residuals)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
serie_ajustada = seas(ipr_arima$residuals)
plot(serie_ajustada)
adf.test(serie_ajustada)
arima_101_fac = acf(serie_ajustada, plot = F)
plot(auto_arima$residuals)
summary(auto_arima)
##____________________________
##____________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                         ECONOMETRÍA II - 2023-I
#                             Trabajo 1, Marzo
##____________________________
##____________________________
remove(list = ls())
#Iniciamos importando librerias
library(forecast)    # Para hacer pronósticos con modelos arima
library(lmtest)      # Significancia individual de los coeficientes ARIMA
library(urca)        # Prueba de raíz unitaria
library(tseries)     # Para estimar modelos de series de tiempo y hacer pruebas de supuestos.
library(readxl)      # Para leer archivos de excel
library(stargazer)   # Para presentar resultados más estéticos.
library(psych)       # Para hacer estadísticas descriptivas
library(seasonal)    # Para desestacionalizar series
library(aTSA)        # Para hacer la prueba de efectos ARCH
library(astsa)       # Para estimar, validar y hacer pronósticos para modelos ARIMA/SARIMA
library(xts)         # Para utilizar objetos xts
library(tidyverse)   # Conjunto de paquetes (incluye dplyr y ggplot2)
library(readxl)      # Para leer archivos excel
library(car)         # Para usar la función qqPlot
# Para la realización del trabajo se uilizará el Índice de producción real de la
# industria manufacturera colombiana
setwd("C:/Users/PC/Documents/Repos/UNAL/Econometría_II")
ipr =  read_excel("srea_027.xls", range= cell_rows(9:480))
colnames(ipr) <- c("Año", "Mes", "Total_industria", "Total_sin_trilla")
#Iniciamos el Data-cleaning y generamos el archivo ts
ipr = select(ipr, -"Total_sin_trilla")
for (i in 1:558){
if (is.na((ipr[i,"Año"])) == FALSE){
valor = ipr[i,"Año"]
}else{
ipr[i,"Año"] = valor
}
}
ipr = na.omit(ipr)
ipr_ts = ts(ipr$Total_industria, start = 1980, frequency = 12)
#Identificación
plot(ipr_ts)
ipr_fac = acf(ipr_ts, plot = F)
ipr_facp = pacf(ipr_ts, plot = F)
plot(ipr_fac, main="Función de Autocorrelación (FAC) de la IPR", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp, main="Función de Autocorrelación Parcial (FACP) de la IPR", xlab="Retraso", ylab="Autocorrelación Parcial")
#Nos damos cuenta que tenemos problemas de estacionareidad via grafica, por ende aplicamos transformaciones
#Especialmente, transformaciones logaritmica y luego diferencia para estabilizar media y varianza
ipr_diff = diff(log(ipr_ts))
ipr_fac_diff = acf(ipr_diff, plot = F)
ipr_facp_diff = pacf(ipr_diff, plot = F)
plot(ipr_fac_diff, main="Función de Autocorrelación (FAC) Log_Diff_IPR", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_diff, main="Función de Autocorrelación Parcial (FACP)_Log_Diff_IPR", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_diff)
kpss.test(ipr_diff)
#Por test de kpss encontramos que la serie es aún no estacionaria dado que se rechaza la hipotesis nula en favor de la alternativa
# ipr_diff_diff = diff(ipr_diff)
# plot(ipr_diff_diff)
#
# ipr_fac_diff_diff = acf(ipr_diff_diff, plot = F)
# ipr_facp_diff_diff = pacf(ipr_diff_diff, plot = F)
#
# plot(ipr_fac_diff_diff, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
# plot(ipr_facp_diff_diff, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
#Al no funcionar estas transformaciones realizaremos un promedio trimestral
ipr_trimestral = aggregate(ipr_ts, nfrequency = 4, FUN = mean)
#verificamos via grafica
plot(ipr_trimestral)
ipr_fac_tri = acf(ipr_trimestral, plot = F)
ipr_facp_tri = pacf(ipr_trimestral, plot = F)
plot(ipr_fac_tri, main="Función de Autocorrelación (FAC) IPR_trimestral", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_tri, main="Función de Autocorrelación Parcial (FACP) IPR_trimestral", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_trimestral)
kpss.test(ipr_trimestral)
#Nos damos cuenta que tenemos problemas de estacionareidad via grafica y formal, por ende aplicamos transformaciones
#Especialmente, transformacion logaritmica y diferencial para estabilizar media y varianza
ipr_tri_diff = diff(ipr_trimestral)
ipr_fac_tri_diff = acf(ipr_tri_diff, plot = F)
ipr_facp_tri_diff = pacf(ipr_tri_diff, plot = F)
plot(ipr_fac_tri_diff, main="Función de Autocorrelación (FAC) IPR (Trimestral)", xlab="Retraso", ylab="Autocorrelación")
plot(ipr_facp_tri_diff, main="Función de Autocorrelación Parcial (FACP) IPR (Trimestral)", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_tri_diff)
kpss.test(ipr_tri_diff)
auto_arima = auto.arima(ipr_trimestral)
summary(auto_arima)
plot(auto_arima$residuals)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
serie_ajustada = seas(ipr_arima$residuals)
plot(serie_ajustada)
arima_101_fac = acf(serie_ajustada, plot = F)
auto_arima = auto.arima(ipr_trimestral)
summary(auto_arima)
plot(auto_arima$residuals)
ipr_arima = arima(ipr_ts, order = c(1,1,2))
serie_ajustada = seas(ipr_arima$residuals)
plot(serie_ajustada)
arima_101_fac = acf(ipr_arima, plot = F)
arima_101_fac = acf(ipr_arima$residuals, plot = F)
arima_101_facp = pacf(ipr_arima$residuals, plot = F)
plot(arima_101_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_101_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
AIC(ipr_arima_2)
ipr_arima_1 = arima(ipr_ts, order = c(1,1,2))
ipr_arima_2 = arima(ipr_ts, order = c(2,1,1))
AIC(ipr_arima_2)
BIC(ipr_arima_1)
AIC(ipr_arima_2)
BIC(ipr_arima_1)
AIC(ipr_arima_2)
BIC(ipr_arima_2)
AIC(ipr_arima_1)
BIC(ipr_arima_1)
AIC(ipr_arima_2)
BIC(ipr_arima_2)
AIC(ipr_arima_1)
BIC(ipr_arima_1)
arima_211_fac = acf(ipr_arima_2$residuals, plot = F)
arima_211_facp = pacf(ipr_arima_2$residuals, plot = F)
plot(arima_211_fac, main="Función de Autocorrelación (FAC)", xlab="Retraso", ylab="Autocorrelación")
plot(arima_211_facp, main="Función de Autocorrelación Parcial (FACP)", xlab="Retraso", ylab="Autocorrelación Parcial")
adf.test(ipr_arima_2$residuals)
kpss.test(ipr_arima_2$residuals)
checkresiduals(ipr_arima_2)
forecast_arima_211 <- forecast(ipr_arima_2, h = 10)
forecast_arima_211 <- forecast(ipr_arima_2, lead = 10)
plot(forecast_arima)
forecast_arima_211 <- forecast(ipr_arima_2, lead = 10)
plot(forecast_arima_211)
forecast_arima_211 <- forecast(ipr_arima_2, lead = 10)
forecast_arima_211 <- forecast(ipr_arima_2, lead = 10)
plot(forecast_arima_211)
forecast_arima_211 <- forecast(ipr_arima_2, lead = 10)
